group_by(Subtype, Resp) %>%
summarize(N = n()) %>%
left_join(dta %>%
group_by(Subtype) %>%
summarize(Total = n())) %>%
mutate(Freq = 100 * N / Total) %>%
select(Subtype, Resp, N, Total, Freq) %>%
data.frame()
rst
i = 1
round(binom.test(rst[i, "N"], rst[i, "Total"])$conf.int, 2)
# function from CG to calculate ORR
get_freq_table <- function(dta_pts, v_name) {
f_tbl <- function(dta) {
rst <- dta %>%
group_by(Subtype, Resp) %>%
summarize(N = n()) %>%
left_join(dta %>%
group_by(Subtype) %>%
summarize(Total = n())) %>%
mutate(Freq = 100 * N / Total) %>%
select(Subtype, Resp, N, Total, Freq) %>%
data.frame()
ci <- NULL
for (i in seq_len(nrow(rst))) {
cur_ci <- binom.test(rst[i, "N"], rst[i, "Total"])$conf.int
ci     <- round(rbind(ci, 100 * cur_ci),2)
}
colnames(ci) <- c("CI_Lb", "CI_Ub")
cbind(rst, data.frame(ci))
}
dta_pts$Resp <- dta_pts[[v_name]]
dta_pts_2    <- dta_pts %>%
mutate(Subtype = "Overall")
rst <- rbind(f_tbl(dta_pts), f_tbl(dta_pts_2))
}
# get table with ORR for RECIST
tab1 = get_freq_table(dta_pts, "OR")
# get table with CBR for RECIST
tab2 = get_freq_table(dta_pts, "CB_6mth_yn")
# get table with ORR for irRECIST
tab3 = get_freq_table(dta_pts, "irOR")
print("ORR with RECIST")
datatable(tab1)
print("ORR with irRECIST")
datatable(tab3)
print("CBR")
datatable(tab2)
##========================
# modified functions from CG
##========================
get_median_txt <- function(rst_survival, unit = "Months ", digits = 1) {
rst_sum <- rbind(summary(rst_survival)$table)
print(rst_sum)
grps    <- sapply(rownames(rst_sum),
function(x) gsub("Subtype=|Group=", "", x))
# median survival by group
med     <- round(rst_sum[, "median"], digits)
# lower 95% CI
ci_l <- round(rst_sum[, "0.95LCL"], digits)
# upper 95% CI
ci_u <- round(rst_sum[, "0.95UCL"], digits)
gm<- apply(cbind(grps, med, ci_l, ci_u), 1,
function(x) paste0(x[1], " = ", x[2], ' (95% CI = [', x[3],', ', x[4],'])'))
median_txt <- paste("Median Survival in ", unit, " \n ",
paste(gm, collapse = "\n"), sep = "")
median_txt
}
## plot survival curves
plot_surv <- function(dat, type_surv = "PFS", title = "",
add_overall = TRUE) {
# p-value for HR+ vs TNBC
dat$time  <- dat[[paste0(type_surv, "_Time")]]
dat$event <- dat[[paste0(type_surv, "_Event")]]
rst_surv_two_groups <- survfit(Surv(time, event) ~ Subtype, data = dat)
#extract p-value
p_val = round(surv_pvalue(rst_surv_two_groups, data = dat)$pval,2)
#     print(p_val)
# add All as a subtype
dat       <- CreateAllFacet(dat, "Subtype")
dat$time  <- dat[[paste(type_surv, "_Time",  sep = "")]]
dat$event <- dat[[paste(type_surv, "_Event", sep = "")]]
rst_survival <- survfit(Surv(time, event) ~ Subtype, data = dat)
median_txt   <- get_median_txt(rst_survival)
attr(rst_survival$strata, "names") <-
sapply(attr(rst_survival$strata, "names"),
function(x) gsub("Subtype=", "", x))
rst_plot     <- ggsurvplot(rst_survival,
data = dat,
risk.table = T,
break.time.by = 5,
legend = "top",
xlab = "Time (in months)",
ylab = "Survival Probability", conf.int = FALSE,
title = title,
palette =c(subtypeCol, "Overall" = 'black'),
ylim = c(0, 1), xlim = c(0, 70),
legend.title = "",
tables.y.text = FALSE)
#    rst_plot$table <- rst_plot$table
rst_plot$plot <- rst_plot$plot +
ggplot2::annotate("text", x = 50, y = 0.8,
size = 5, label = median_txt) # add text with median survival
# add text with p-value
#      ggplot2::annotate(geom="text", x=15, y=0,
#                          size = 5,  label=paste("The p-value for HR+ vs TNBC is", p_val))
# print p-value
print(paste("The p-value for HR+ vs TNBC is", p_val))
print(rst_plot)
}
pval_surv <- function(dat, type_surv = "PFS") {
dat$time  <- dat[[paste(type_surv, "_Time",  sep = "")]]
dat$event <- dat[[paste(type_surv, "_Event", sep = "")]]
surv_dat <- dat %>%
dplyr::filter(Subtype != "Overall") %>%
data.frame()
rst <- survfit(Surv(time, event) ~ Subtype,
data = surv_dat)
surv_pvalue(rst, data = surv_dat)
}
## -------------------------------------------------------------
##            Survival
## -------------------------------------------------------------
pfs <- plot_surv(dta_pts, "PFS", "Progression Free Survival")
os <- plot_surv(dta_pts, "OS", "Overall Survival")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
rm(list = ls())
library('xlsx')
library(dplyr)
library(tidyr)
library(stringr)
library(data.table)
library("DT")
geti = function(x,i){x[i]}
# set root folder
rootDir = "C:/Users/Luda/OneDrive - Johns Hopkins/J15221_Evanthia_breast_data/"
# labels for time points
timeLab  = c("Baseline", "Post Run-in", "Week 8")
#===================
# Load data from CG
# CD8, FOXP3, TILs
load(paste0(rootDir,'Analysis/Data/Data_CD8_FOXP3_TIL/analysis.Rdata'))
# load updated clinical and follow up info
load("clinical_data_5.3.23.rda")
rownames(dta_pts) = dta_pts$ID
rownames(dta_surv) = dta_surv$ID
##Remove samples with NA for response and Unknown BestResp Samples
dta_pts <- dta_pts[!(dta_pts$Best_Resp=="Unknown"),]
dta_pts <- dta_pts[!is.na(dta_pts$Best_Resp),]
# add combined responses: CR+PR and CR+PR+SD
dta_pts$Response3 = dta_pts$CBR = dta_pts$RECIST = as.character(dta_pts$Best_Resp)
dta_pts = dta_pts %>% mutate(Response3 = factor(Response3,
levels = c('CR','PR','SD','PD'),
labels = c("CR,PR","CR,PR",'SD','PD')))
dta_pts = dta_pts %>% mutate(CBR = factor(CBR,
levels = c('CR','PR','SD','PD'),
labels = c("CR,PR,SD","CR,PR,SD",'CR,PR,SD','PD')))
dta_pts = dta_pts %>% mutate(RECIST = factor(RECIST,
levels = c('CR','PR','SD','PD'),
labels = c("Responder","Responder",'Non-responder','Non-responder')))
#=======================
# add publication IDs
pubID = read.csv(paste0(rootDir,"Doc/publicationID.csv"), row.names = 1)
# add two digit IDs for mapping with Won's data
pubID$twoDigit = substr(rownames(pubID),8,9)
# add a column with patients with evaluable disease
pubID$evaluable = FALSE
pubID[rownames(pubID) %in% rownames(dta_pts), "evaluable"] = TRUE
# add them to the patient info
dta_pts$pubID = pubID[rownames(dta_pts),"Publication.ID"]
dta_pts <- dta_pts %>%
mutate(stars = if_else(pubID %in% c("R-5", "R-16"),"*", ""))
dta_pts[which(dta_pts$pubID == "R-1"), 'stars'] = "**"
# treatment info
treat = read.xlsx(paste0(rootDir,"Analysis/Data/TreatmentInfo/table_treatment.xlsx"), 1)
rownames(treat) = treat$Subject
treat$pubID = pubID[treat$Subject,"Publication.ID"]
# race info
patientInfo = read.xlsx(paste0(rootDir,"from_CG/J15221_BreastCohort/FromTeam/9844 Patient information ERT updates 6.22.21.xlsx"), 1)
race = str_trim(tolower(patientInfo[,"race."]))
names(race) = patientInfo[,"Subject.number."]
# fix typo "whte"
race = gsub("whte","white",race)
# biopsy tissue site
tissue = read.csv(paste0(rootDir,"Analysis/sampleAnnot_RNAseq.csv"))
tissue = tissue[,c("Sample.Group.ID", "Tissue_Broad")]
# remove duplications
tissue = tissue[!duplicated(tissue[,1]),]
rownames(tissue) = tissue[,1]
# find missing patient
setdiff(dta_pts$ID, tissue$Sample.Group.ID)
tab = cbind(ID = dta_pts[,"pubID"],
Subtype = dta_pts[,"Subtype"],
dta_pts[,c("Best_Resp","RECIST","CB_6mth", "CB_6mth_yn", "OR","irOR","ECOG", "Age")],
race = race[rownames(dta_pts)],
round(dta_surv[rownames(dta_pts), c("PFS_Time", "PFS_Event", "OS_Time", "OS_Event")],2),
biopsy_site = tissue[rownames(dta_pts), "Tissue_Broad"],
latest_treatment = treat[rownames(dta_pts), "TX.NAME"],
latest_treatment_class = treat[rownames(dta_pts), "TX.CLASS"],
exceptional_response = dta_pts[,"stars"])
tab
# order by pubID
tab = tab[order(tab$ID),]
tab
dim(tab)
table(tab$Best_Resp)
head(dta_pts)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
library(data.table)
library("DT")
library(gridExtra)
library(survival)
library(survminer)
##Create All Facet for plotting
CreateAllFacet <- function(df, col){
df$Subtype <- df[[col]]
temp <- df
temp$Subtype <- "Overall"
merged <-rbind(temp, df)
# ensure the facet value is a factor
merged[[col]] <- factor(merged[[col]], levels = c("HR+", "TNBC", "Overall"))
return(merged)
}
# set colors
recistCol = c("Non-responder" = "red","Responder" = "blue")
cbrCol = c("CR,PR,SD" = "blue","PD" = "red")
subtypeCol = c("HR+" = "red", "TNBC" = "blue")
timeCol = c("Baseline" = "black", "Time 1" = 'grey45', "Time 2" = 'grey75')
# set root folder
rootDir = "./"
# Load data patient data
dta_pts = read.csv(paste0(rootDir,"input_tables/table_patient_info.csv"), row.names = 1)
dta_pts$ID = rownames(dta_pts)
# load data for a spider plot
dta_tumor = read.csv(paste0(rootDir,"input_tables/table_tumor_size_change.csv"))
colnames(dta_tumor) = c("ID",'Days', "Y" )
datatable(dta_pts)
# function from CG to calculate ORR
get_freq_table <- function(dta_pts, v_name) {
f_tbl <- function(dta) {
rst <- dta %>%
group_by(Subtype, Resp) %>%
summarize(N = n()) %>%
left_join(dta %>%
group_by(Subtype) %>%
summarize(Total = n())) %>%
mutate(Freq = 100 * N / Total) %>%
select(Subtype, Resp, N, Total, Freq) %>%
data.frame()
ci <- NULL
for (i in seq_len(nrow(rst))) {
cur_ci <- binom.test(rst[i, "N"], rst[i, "Total"])$conf.int
ci     <- round(rbind(ci, 100 * cur_ci),2)
}
colnames(ci) <- c("CI_Lb", "CI_Ub")
cbind(rst, data.frame(ci))
}
dta_pts$Resp <- dta_pts[[v_name]]
dta_pts_2    <- dta_pts %>%
mutate(Subtype = "Overall")
rst <- rbind(f_tbl(dta_pts), f_tbl(dta_pts_2))
}
# get table with ORR for RECIST
tab1 = get_freq_table(dta_pts, "OR")
# get table with CBR for RECIST
tab2 = get_freq_table(dta_pts, "CB_6mth_yn")
# get table with ORR for irRECIST
tab3 = get_freq_table(dta_pts, "irOR")
print("ORR with RECIST")
datatable(tab1)
print("ORR with irRECIST")
datatable(tab3)
print("CBR")
datatable(tab2)
#=======================
# it finds the minimum Y per patient
# what is Y I'm not sure
get_tumor_best <- function(dat_tumor) {
dta_tumor %>%
filter(0 != Days) %>%
group_by(ID) %>%
filter(Y == min(Y)) %>%
mutate(Y = Y * 100) %>%
arrange(desc(Y))
}
#=========================================
# # waterfall plot of Best Overall Response (%)
# adds patient info to tumor data
dat <- get_tumor_best(dta_tumor) %>%
left_join(dta_pts)
# reproducing waterfall plot of best response
wtr1 = ggplot(dat, aes(x = reorder(ID, -Y), y = Y, fill = Subtype)) +
ylab ("Best Overall Response (%)") +
xlab("Patients") +
geom_bar(stat = "identity") + ylim(-100, 100) +
scale_fill_manual(values = subtypeCol) +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
geom_hline(yintercept = c(-30, 20), linetype = 'dashed') +
geom_text(aes(y=1, label = exceptional_response), size = 6)
print(wtr1)
#===============
# waterfall of months
#==============
dat <- get_tumor_best(dta_tumor) %>%
left_join(dta_pts) %>%
mutate(Days = Days / 30.5) %>% # convert days to months
arrange(Subtype, Days)
# make ID as factor with order organized by type and days.
# otherwise, barplot makes it in alphabetical order
dat$ID = factor(dat$ID, levels = dat$ID)
wtr2 = ggplot(dat, aes(x = Days, y = ID, fill = Subtype)) +
ylab("Patients") +
geom_bar(stat = "identity") +
theme_bw()+
labs(x = "Months")+
scale_fill_manual(values = subtypeCol) +
geom_text(aes(y=ID, x = Days + 1, label = exceptional_response), size = 6)
print(wtr2)
#====================
# spider plot
#====================
# keep only sample from patients with patient info
dta_tumor <- dta_tumor %>% filter(ID %in% dta_pts$ID)
# add patient into to tumor data
dat <- dta_tumor %>%
left_join(dta_pts) %>%
mutate(Days = Days / 30.5,
Y    = Y *  100) %>%
arrange(ID, Days)
# add stars
dta_star <- dat %>%
filter(exceptional_response == "*") %>%
group_by(ID) %>%
filter(Days == max(Days)) %>%
mutate(Days = Days,
label = "*") %>%
rbind(dat %>%
filter(exceptional_response == "**") %>%
group_by(ID) %>%
filter(Days == max(Days)) %>%
mutate(Days = Days,
label = "**"))
# make plot
sp1 = ggplot(data = dat, aes(x = Days, y = Y)) +
geom_line(aes(group = ID, col = Subtype), size = 1.5) +
theme_bw() +
labs(x = "Months", y = "Percent Change") +
geom_hline(yintercept = 0) +
geom_hline(yintercept = 30,  lty = 2) +
geom_hline(yintercept = -30, lty = 2) +
scale_colour_manual(values = subtypeCol) +
geom_text(data = dta_star,
aes(x = Days, y = Y+1, label = label),size = 6)+
theme(legend.title = element_blank(), legend.position = c(0.5, 0.88))
print(sp1)
##========================
# modified functions from CG
##========================
get_median_txt <- function(rst_survival, unit = "Months ", digits = 1) {
rst_sum <- rbind(summary(rst_survival)$table)
print(rst_sum)
grps    <- sapply(rownames(rst_sum),
function(x) gsub("Subtype=|Group=", "", x))
# median survival by group
med     <- round(rst_sum[, "median"], digits)
# lower 95% CI
ci_l <- round(rst_sum[, "0.95LCL"], digits)
# upper 95% CI
ci_u <- round(rst_sum[, "0.95UCL"], digits)
gm<- apply(cbind(grps, med, ci_l, ci_u), 1,
function(x) paste0(x[1], " = ", x[2], ' (95% CI = [', x[3],', ', x[4],'])'))
median_txt <- paste("Median Survival in ", unit, " \n ",
paste(gm, collapse = "\n"), sep = "")
median_txt
}
## plot survival curves
plot_surv <- function(dat, type_surv = "PFS", title = "",
add_overall = TRUE) {
# p-value for HR+ vs TNBC
dat$time  <- dat[[paste0(type_surv, "_Time")]]
dat$event <- dat[[paste0(type_surv, "_Event")]]
rst_surv_two_groups <- survfit(Surv(time, event) ~ Subtype, data = dat)
#extract p-value
p_val = round(surv_pvalue(rst_surv_two_groups, data = dat)$pval,3)
#     print(p_val)
# add All as a subtype
dat       <- CreateAllFacet(dat, "Subtype")
dat$time  <- dat[[paste(type_surv, "_Time",  sep = "")]]
dat$event <- dat[[paste(type_surv, "_Event", sep = "")]]
rst_survival <- survfit(Surv(time, event) ~ Subtype, data = dat)
median_txt   <- get_median_txt(rst_survival)
attr(rst_survival$strata, "names") <-
sapply(attr(rst_survival$strata, "names"),
function(x) gsub("Subtype=", "", x))
rst_plot     <- ggsurvplot(rst_survival,
data = dat,
risk.table = T,
break.time.by = 5,
legend = "top",
xlab = "Time (in months)",
ylab = "Survival Probability", conf.int = FALSE,
title = title,
palette =c(subtypeCol, "Overall" = 'black'),
ylim = c(0, 1), xlim = c(0, 70),
legend.title = "",
tables.y.text = FALSE)
#    rst_plot$table <- rst_plot$table
rst_plot$plot <- rst_plot$plot +
ggplot2::annotate("text", x = 50, y = 0.8,
size = 5, label = median_txt) # add text with median survival
# add text with p-value
#      ggplot2::annotate(geom="text", x=15, y=0,
#                          size = 5,  label=paste("The p-value for HR+ vs TNBC is", p_val))
# print p-value
print(paste("The p-value for HR+ vs TNBC is", p_val))
print(rst_plot)
}
pval_surv <- function(dat, type_surv = "PFS") {
dat$time  <- dat[[paste(type_surv, "_Time",  sep = "")]]
dat$event <- dat[[paste(type_surv, "_Event", sep = "")]]
surv_dat <- dat %>%
dplyr::filter(Subtype != "Overall") %>%
data.frame()
rst <- survfit(Surv(time, event) ~ Subtype,
data = surv_dat)
surv_pvalue(rst, data = surv_dat)
}
## -------------------------------------------------------------
##            Survival
## -------------------------------------------------------------
pfs <- plot_surv(dta_pts, "PFS", "Progression Free Survival")
os <- plot_surv(dta_pts, "OS", "Overall Survival")
sessionInfo()
dta_pts
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, cache=FALSE)
rm(list = ls())
library('xlsx')
library(dplyr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
library(data.table)
library("DT")
library(gridExtra)
library(survival)
library(survminer)
library(xtable)
library(readxl)
# set root folder
rootDir = "C:/Users/Luda/OneDrive - Johns Hopkins/J15221_Evanthia_breast_data/"
# code from CG
fname  <- paste0(rootDir, "from_CG/J15221_BreastCohort/FromTeam/Data_05032023/9844 Patient information ERT updates 5.4.23 updates for Luda.xlsx")
raw_pts <- read_excel(fname, sheet = 1) %>%
data.frame()
# remove non-patient rows
raw_pts = raw_pts %>% filter(!is.na(TODAYS.DAY))
dta_pts <- raw_pts %>%
mutate(ID         = Subject.number,
Subtype    = Cancer.subtype,
Gender     = gender,
Age        = age,
ECOG       = ECOG,
Date_Tx    = Start.date.of.tx,
Date_Pd    = irRECIST.date.of.progression,
Date_Dth   = DOD,
Date_Lfu   = Date.of.Last.FU,
Best_Resp  = best.response,
Date_Resp  = date.of.best.reponse,
irRECIST_Best_resp = irRECIST.best.response,
irRECIST_Date = irRECIST.best.response.date,
CB_6mth    = CBR.at.6.months..details.,
CB_6mth_yn = CBR.at.6.months..y.n.) %>%
mutate(OR         = factor(Best_Resp,
levels  = c("CR", "PR", "SD", "PD", NA),
labels  = c("Yes", "Yes", "No", "No", "Unknown"),
exclude = NULL)) %>%
mutate(irOR         = factor(irRECIST_Best_resp,
levels  = c("CR", "PR", "SD", "PD", NA),
labels  = c("Yes", "Yes", "No", "No", NA),
exclude = NULL)) %>%
mutate(Best_Resp  = factor(Best_Resp,
levels  = c("CR", "PR", "SD", "PD", NA),
labels  = c("CR", "PR", "SD", "PD", "Unknown"),
exclude = NULL),
CB_6mth_yn = factor(CB_6mth_yn,
levels  = c("y", "n", "N", NA),
labels  = c("Yes", "No", "No", "Unknown"),
exclude = NULL)
) %>%
mutate(Response  = factor(Best_Resp,
levels = c("CR", "PR", "SD", "PD", "Unknown"),
labels = c("CR", "PR", "Other", "Other", "Other")),
Response2 = factor(Best_Resp,
levels = c("CR", "PR", "SD", "PD", "Unknown"),
labels = c("CR,PR", "CR,PR",
"Other", "Other", "Other"))) %>%
select(ID, Subtype, Gender, Age, ECOG,
Date_Tx, Date_Pd, Date_Dth, Date_Lfu,
Best_Resp, Date_Resp, OR, irOR,
Response, Response2,
irRECIST_Best_resp,irRECIST_Date,
CB_6mth, CB_6mth_yn)
head(raw_pts)
